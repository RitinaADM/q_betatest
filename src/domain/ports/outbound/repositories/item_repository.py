"""
Интерфейс исходящего порта репозитория для доменной сущности Item.
Определяет контракт для операций персистентности данных.
Представляет "управляемую" сторону гексагональной архитектуры.
"""

from abc import ABC, abstractmethod
from typing import List, Optional, Protocol, runtime_checkable
from src.domain.entities.item import Item


@runtime_checkable
class ItemRepository(Protocol):
    """
    Протокол репозитория для доменной сущности Item.
    Определяет контракт для операций персистентности данных.
    
    Этот протокол определяет, как домен может взаимодействовать с системами хранения
    данных (базы данных, файловые системы, внешние API), не завися от конкретной реализации.
    """
    
    async def create(self, item: Item) -> Item:
        """
        Создание нового элемента в репозитории.
        
        Аргументы:
            item: Доменная сущность для создания
            
        Возвращает:
            Созданный элемент с назначенным ID
            
        Исключения:
            RepositoryError: При ошибках создания
        """
        ...
    
    async def get_by_id(self, item_id: int) -> Optional[Item]:
        """
        Получение элемента по его идентификатору.
        
        Аргументы:
            item_id: Уникальный идентификатор элемента
            
        Возвращает:
            Найденный элемент или None, если не найден
            
        Исключения:
            RepositoryError: При ошибках поиска
        """
        ...
    
    async def get_all(self) -> List[Item]:
        """
        Получение всех элементов из репозитория.
        
        Возвращает:
            Список всех элементов
            
        Исключения:
            RepositoryError: При ошибках получения
        """
        ...
    
    async def update(self, item: Item) -> Optional[Item]:
        """
        Обновление существующего элемента в репозитории.
        
        Аргументы:
            item: Доменная сущность с обновленными данными
            
        Возвращает:
            Обновленный элемент или None, если не найден
            
        Исключения:
            RepositoryError: При ошибках обновления
        """
        ...
    
    async def delete(self, item_id: int) -> bool:
        """
        Удаление элемента из репозитория.
        
        Аргументы:
            item_id: Уникальный идентификатор элемента для удаления
            
        Возвращает:
            True, если элемент был удален, False, если не найден
            
        Исключения:
            RepositoryError: При ошибках удаления
        """
        ...
    
    async def search_by_name(self, query: str) -> List[Item]:
        """
        Поиск элементов по названию, содержащему поисковую строку.
        
        Аргументы:
            query: Поисковая строка
            
        Возвращает:
            Список элементов, соответствующих критериям поиска
            
        Исключения:
            RepositoryError: При ошибках поиска
        """
        ...